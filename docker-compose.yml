version: "3.9"

services:

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_URL: ${RABBITMQ_URL}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      - rabbitmq
      - db
    networks:
      - app-network
    command: ["npm", "start"]
    # command: ["yarn", "start"] # Start the app

#  ngrok:
#    image: wernight/ngrok
#    environment:
#      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN} # Get the token on https://ngrok.com
#    depends_on:
#      - app
#    command: ["http", "app:3000"]

volumes:
  postgres_data:
  # node_modules:

networks:
  app-network:
    driver: bridge

